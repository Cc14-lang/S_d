@tool
@icon("res://addons/basic_shape_creation/basic_collision_polygon2d/basic_collision_polygon2d.svg")
extends Node2D
class_name BasicCollisionPolygon2D

## A node that provides a basic shape to a [CollisionObject2D] parent.
##
## A node that provides a shape generated by a [BasicPolygon2D] to a [CollisionObject2D] parent and allows edits to it.
## The shape may be convex or concave, and may be series of lines instead, which may not be connected to each other.
## This can give a detection shape to an [Area2D] or turn a [PhysicsBody2D] into a solid object.
## [br][br][b][color=red]Warning[/color][/b]: Removing this [Script] from a node with a [CollisionObject2D] parent will cause it to fail to remove
## the provided shape to the [CollisionObject2D]. Adding this [Script] to a node which already has a [CollisionObject2D] parent
## will cause it to fail to provide it with a shape until it is reparented.

## Toggles whether this shape is disabled and unable to detect collisions.
@export
var disabled := false:
	set(value):
		disabled = value
		queue_redraw()
		if _collision_object_parent != null:
			_collision_object_parent.shape_owner_set_disabled(_owner_id, value)

## Toggles whether this shape only detects collisions with edges that face up, relative to [BasicCollisionPolygon2D]'s rotation.
## [br][br][b]Note[/b]: This property has no effect if this [BasicCollisionPolygon2D] is a child of an [Area2D] node.
@export
var one_way_collision := false:
	set(value):
		one_way_collision = value
		queue_redraw()
		update_configuration_warnings()
		if _collision_object_parent != null:
			_collision_object_parent.shape_owner_set_one_way_collision(_owner_id, value)

## The margin used for one-way collision (in pixels). Higher values will make the shape thicker,
## and work better for colliders that enter the polygon at a high velocity.
@export_range(0, 128, 0.1, "suffix:px")
var one_way_collision_margin := 1.0:
	set(value):
		one_way_collision_margin = value
		if _collision_object_parent != null:
			_collision_object_parent.shape_owner_set_one_way_collision_margin(_owner_id, value)

@export_group("Generation")

## The number of vertices in the base shape.
## A value of [code]1[/code] creates a 32 vertices shape.
## A value of [code]2[/code] creates multiple equidistantly spaced lines from the center, one for each value in [member sizes].
@export_range(1, 1000)
var vertices_count : int = 1:
	get: return _basic_polygon_instance.vertices_count
	set(value): _basic_polygon_instance.vertices_count = value

## The distance from the center to each vertex, cycling through if there are multiple values.
## [br][br][b]Note[/b]: The default value is a [PackedFloat64Array] of [code][10.0][/code]. The [code]<unknown>[/code]
## documented here is a bug with Godot.
@export
var sizes : PackedFloat64Array = PackedFloat64Array([10]):
	get: return _basic_polygon_instance.sizes
	set(value): _basic_polygon_instance.sizes = value

## The size of the ring, in proportion from the outer edge to the center. A value of [code]1[/code] creates a normal shape,
## a value of [code]0[/code] creates a [enum ShapeType].Polyline outline, and a negative value extends the ring outwards proportionally.
@export_range(0, 1, 0.001, "or_less")
var ring_ratio : float = 1.0:
	get: return _basic_polygon_instance.ring_ratio
	set(value): _basic_polygon_instance.ring_ratio = value

## The size of each corner, as the distance along both edges, from the original vertex, to the point where the corner starts and ends.
@export_range(0.0, 10, 0.001, "or_greater", "hide_slider")
var corner_size : float = 0.0:
	get: return _basic_polygon_instance.corner_size
	set(value): _basic_polygon_instance.corner_size = value

## How many lines make up each corner. A value of [code]0[/code] will use a value of [code]32[/code] divided by [member vertices_count].
@export_range(0, 50)
var corner_detail : int = 0:
	get: return _basic_polygon_instance.corner_detail
	set(value): _basic_polygon_instance.corner_detail = value

## The starting angle of the arc of the shape that is created, in radians.
@export_range(-360, 360, 0.1, "or_greater", "or_less", "radians")
var arc_start : float = 0.0:
	get: return _basic_polygon_instance.arc_start
	set(value): _basic_polygon_instance.arc_start = value

## The angle of the arc of the shape that is created, in radians.
@export_range(0, 360, 0.1, "or_greater", "or_less", "radians")
var arc_angle : float = TAU:
	get: return _basic_polygon_instance.arc_angle
	set(value): _basic_polygon_instance.arc_angle = value

## The ending angle of the arc of the shape that is created, in radians.
## [br][br][b]Note[/b]: This property's value depends on [member arc_start] and [member arc_angle],
## and setting this property will affect [member arc_angle].
var arc_end : float = TAU:
	get: return arc_start + arc_angle
	set(value): arc_angle = value - arc_start

## The starting angle of the arc of the shape that is created, in degrees.
var arc_start_degrees : float:
	get: return rad_to_deg(arc_start)
	set(value): arc_start = deg_to_rad(value)

## The angle of the arc of the shape that is created, in degrees.
var arc_angle_degrees : float:
	get: return rad_to_deg(arc_angle)
	set(value): arc_angle = deg_to_rad(value)

## The ending angle of the arc of the shape that is created, in degrees.
## [br][br][b]Note[/b]: This property's value depends on [member arc_start_degrees] and [member arc_angle_degrees],
## and setting this property will affect [member arc_angle_degrees].
var arc_end_degrees : float:
	get: return rad_to_deg(arc_end)
	set(value): arc_end = deg_to_rad(value)

## The method for closing an open shape. See [enum Polygon2D.ClosingMethod]
@export
var closing_method : BasicPolygon2D.ClosingMethod = BasicPolygon2D.ClosingMethod.SLICE:
	get: return _basic_polygon_instance.closing_method
	set(value): _basic_polygon_instance.closing_method = value

## Toggles rounding the corners cut out by [member arc_angle].
@export
var round_arc_ends : bool = false:
	get: return _basic_polygon_instance.round_arc_ends
	set(value): _basic_polygon_instance.round_arc_ends = value

@export_subgroup("Offset Transform", "offset")

## The offset postition of the shape
@export
var offset_position := Vector2.ZERO:
	get: return _basic_polygon_instance.offset_position
	set(value): _basic_polygon_instance.offset_position = value

## The offset rotation of the shape, in radians.
@export_range(-360, 360, 0.1, "or_greater", "or_less", "radians")
var offset_rotation : float = 0:
	get: return _basic_polygon_instance.offset_rotation
	set(value): _basic_polygon_instance.offset_rotation = value

## The offset rotation of the shape, in degrees.
var offset_rotation_degrees : float = 0:
	set(value):
		offset_rotation = deg_to_rad(value)
	get:
		return rad_to_deg(offset_rotation)

## The offset scale of the shape.
@export
var offset_scale := Vector2.ONE:
	get: return _basic_polygon_instance.offset_scale
	set(value): _basic_polygon_instance.offset_scale = value

## The offset skew of the shape
@export_range(-89.9, 89.9, 0.1, "radians")
var offset_skew := 0.0:
	get: return _basic_polygon_instance.offset_skew
	set(value): _basic_polygon_instance.offset_skew = value

## The offset [Transform2D] of the shape.
var offset_transform := Transform2D.IDENTITY:
	get: return _basic_polygon_instance.offset_transform
	set(value): _basic_polygon_instance.offset_transform = value

var _created_shape : PackedVector2Array:
	get: return _basic_polygon_instance._created_shape
	set(value): _basic_polygon_instance._created_shape = value

var _decomposed_created_shape : Array[PackedVector2Array]:
	get: return _basic_polygon_instance._decomposed_created_shape
	set(value): _basic_polygon_instance._decomposed_created_shape = value

var _collision_shapes : Array[Shape2D] = []:
	set(value):
		assert(value != null)

		for shape in _collision_shapes:
			shape.changed.disconnect(queue_redraw)

		_collision_shapes = value
		_basic_polygon_instance._queue_status = BasicPolygon2D._UNQUEUED

		queue_redraw()
		for shape in _collision_shapes:
			shape.changed.connect(queue_redraw)

		if _collision_object_parent == null:
			return

		_collision_object_parent.shape_owner_clear_shapes(_owner_id)
		for shape in value:
			_collision_object_parent.shape_owner_add_shape(_owner_id, shape)

		_update_shape_owner()

# PackedFloat64Arrays don't play well with reverts when exported in Godot 4.2, so this is required
func _property_can_revert(property: StringName) -> bool: return property == &"sizes"
func _property_get_revert(_property: StringName) -> Variant: return PackedFloat64Array([10.0])

func _get_property_list() -> Array[Dictionary]:
	return [{
		name = "_decomposed_created_shape",
		type = TYPE_ARRAY,
		usage = PROPERTY_USAGE_STORAGE
	},
	{
		name = "_created_shape",
		type = TYPE_PACKED_VECTOR2_ARRAY,
		usage = PROPERTY_USAGE_STORAGE
	},
	{
		name = "_collision_shapes",
		type = TYPE_ARRAY,
		usage = PROPERTY_USAGE_STORAGE
	}]

var _collision_object_parent : CollisionObject2D = null
var _owner_id := -1

var _basic_polygon_instance : BasicPolygon2D

## Gets the created shape.
func get_created_shape() -> PackedVector2Array: return _created_shape
## Gets the created shape, decomposed into convex hulls.
func get_created_shape_decomposed() -> Array[PackedVector2Array]: return _decomposed_created_shape
## Gets the type of shape provided by this [BasicCollisionPolygon2D]. See [enum BasicPolygon2D.ShapeType].
func get_created_shape_type() -> BasicPolygon2D.ShapeType: return _basic_polygon_instance.get_created_shape_type()

func _init() -> void:
	_basic_polygon_instance = BasicPolygon2D.new()
	_basic_polygon_instance.draw_shape = false
	_basic_polygon_instance.export_behavior = BasicPolygon2D.ExportBehavior.EDITOR | BasicPolygon2D.ExportBehavior.RUN_TIME
	_basic_polygon_instance.shape_exported.connect(_on_shape_exported)
	add_child(_basic_polygon_instance, false, INTERNAL_MODE_FRONT)

func _on_shape_exported(shape : PackedVector2Array, decomposed : Array[PackedVector2Array], type : BasicPolygon2D.ShapeType) -> void:
	if absf(arc_angle) <= PI and ring_ratio < 1 and ring_ratio > 0 and closing_method == BasicPolygon2D.ClosingMethod.CHORD:
		_collision_shapes = []
		return

	match type:
		BasicPolygon2D.ShapeType.POLYGON:
			var shapes : Array[Shape2D] = []
			shapes.resize(decomposed.size())
			for i in decomposed.size():
				var convex_shape := ConvexPolygonShape2D.new()
				convex_shape.points = decomposed[i]
				shapes[i] = convex_shape
			_collision_shapes = shapes

		BasicPolygon2D.ShapeType.POLYLINE:
			var polyline := shape.duplicate()
			polyline.resize(polyline.size() * 2 - 2)
			for i in shape.size() - 1:
				var index := shape.size() - i - 1
				polyline[-i * 2 - 1] = polyline[index]
				polyline[-i * 2 - 2] = polyline[index - 1]

			var concave_shape := ConcavePolygonShape2D.new()
			concave_shape.segments = polyline
			_collision_shapes = [concave_shape]

		BasicPolygon2D.ShapeType.MULTILINE:
			var concave_shape := ConcavePolygonShape2D.new()
			concave_shape.segments = shape
			_collision_shapes = [concave_shape]


func _update_shape_owner() -> void:
	assert(_collision_object_parent != null)

	_collision_object_parent.shape_owner_set_transform(_owner_id, transform)
	_collision_object_parent.shape_owner_set_disabled(_owner_id, disabled)
	_collision_object_parent.shape_owner_set_one_way_collision(_owner_id, one_way_collision)
	_collision_object_parent.shape_owner_set_one_way_collision_margin(_owner_id, one_way_collision_margin)

func _enter_tree() -> void:
	if _collision_object_parent != null:
		_update_shape_owner()

func _notification(what: int) -> void:
	match(what):
		NOTIFICATION_PARENTED:
			_collision_object_parent = get_parent() as CollisionObject2D
			if _collision_object_parent == null:
				return

			_owner_id = _collision_object_parent.create_shape_owner(self)
			for shape in _collision_shapes:
				_collision_object_parent.shape_owner_add_shape(_owner_id, shape)
			_update_shape_owner()
		NOTIFICATION_LOCAL_TRANSFORM_CHANGED:
			if _collision_object_parent != null:
				_collision_object_parent.shape_owner_set_transform(_owner_id, transform)
		NOTIFICATION_UNPARENTED:
			if _collision_object_parent == null:
				return

			_collision_object_parent.remove_shape_owner(_owner_id)
			_collision_object_parent = null
			_owner_id = -1

func _draw() -> void:
	if not Engine.is_editor_hint() and (not is_inside_tree() or not get_tree().debug_collisions_hint):
		return

	if _collision_shapes.is_empty():
		return

	var debug_color : Color = ProjectSettings.get_setting("debug/shapes/collision/shape_color", Color("0099b36b"))
	var rid := get_canvas_item()
	var color := debug_color
	for shape in _collision_shapes:
		var color_actual := color
		if disabled:
			var gray := color.v
			color_actual = Color(gray, gray, gray, 0.25)
		shape.draw(rid, color_actual)
		color.h = fmod(color.h + 0.738, 1)

	if not one_way_collision:
		return

	color = debug_color.inverted()
	if disabled:
		color = color.darkened(0.25)

	var target := Vector2(0, 20)
	var size := 8
	var offset := Vector2(0.7071 * size, 0)
	draw_line(Vector2.ZERO, target, color, 2)
	draw_colored_polygon([target + Vector2(0, size), target + offset, target - offset], color)

func _get_configuration_warnings() -> PackedStringArray:
	var warnings := _basic_polygon_instance._get_configuration_warnings()

	if _collision_object_parent == null:
		warnings.push_back("BasicCollisionPolygon2D only serves to provide a collision shape to a CollisionObject2D derived node.\nPlease only use it as a child of Area2D, StaticBody2D, RigidBody2D, CharacterBody2D, etc. to give them a shape.")
	if one_way_collision and _collision_object_parent is Area2D:
		warnings.push_back("The One Way Collision property will be ignored when the collision object is an Area2D.")

	return warnings

## Gets the number of [Shape2D]s that this [BasicCollisionPolygon2D] is providing.
func shape_count() -> int: return _collision_shapes.size()

## Gets the [Shape2D] at the given index. The number of [Shape2D]s is provided by [method shape_count].
func get_shape(index : int) -> Shape2D: return _collision_shapes[index]

## Gets the underlying [BasicPolygon2D] instance that generates the shapes this [BasicCollisionPolygon2D] provides.
func get_basic_polygon() -> BasicPolygon2D: return _basic_polygon_instance
