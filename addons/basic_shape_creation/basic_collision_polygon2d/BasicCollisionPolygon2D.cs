using Godot;
using System;

namespace BasicShapeCreation;

/// <summary>
/// A node that provides a shape generated by a <see cref="BasicPolygon2D"/> to a <see cref="CollisionObject2D"/> parent and allows edits to it.
/// The shape may be convex or concave, and may be series of lines instead, which may not be connected to each other.
/// This can give a detection shape to an <see cref="Area2D"/> or turn a <see cref="PhysicsBody2D"/> into a solid object.
/// </summary>
/// <remarks>
/// This class is a wrapper around an instance of a <see cref="Node2D"/> s with the <see cref="GDScript"/> at
/// "res://addons/basic_shape_creation/basic_collision_polygon2d/basic_collision_polygon2d.gd" attached.
/// The <see cref="Node2D"/> instance can be accessed with <see cref="Instance"/>.
/// </remarks>
public class BasicCollisionPolygon2D
{
    /// <summary>The string path to the script this class wraps around.</summary>
    public const string GDScriptEquivalentPath = "res://addons/basic_shape_creation/basic_collision_polygon2d/basic_collision_polygon2d.gd";
    /// <summary>The loaded <see cref="GDScript"/> of <see cref="GDScriptEquivalentPath"/>.</summary>
    public static readonly GDScript GDScriptEquivalent = GD.Load<GDScript>(GDScriptEquivalentPath);

    /// <summary>The <see cref="GDScriptEquivalent"/> instance this class wraps around.</summary>
    public Node2D Instance { get; }

    /// <summary>Toggles whether this shape is disabled and unable to detect collisions.</summary>
    public bool Disabled
    {
        get => Instance.Get(PropertyName.Disabled).AsBool();
        set => Instance.Set(PropertyName.Disabled, value);
    }

   /// <summary>
   /// Toggles whether this shape only detects collisions with edges that face up, relative to <see cref="BasicCollisionPolygon2D"/>'s rotation.
   /// </summary>
   ///  <remarks>This property has no effect if this <see cref="BasicCollisionPolygon2D"/> is a child of an <see cref="Area2D"/> node.</remarks>
    public bool OneWayCollision
    {
        get => Instance.Get(PropertyName.OneWayCollision).AsBool();
        set => Instance.Set(PropertyName.OneWayCollision, value);
    }

    /// <summary>
    /// The margin used for one-way collision (in pixels). Higher values will make the shape thicker,
    /// and work better for colliders that enter the polygon at a high velocity.
    /// </summary>
    public int OneWayCollisionMargin
    {
        get => Instance.Get(PropertyName.OneWayCollisionMargin).AsInt32();
        set => Instance.Set(PropertyName.OneWayCollisionMargin, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.VerticesCount"/>
    public int VerticesCount
    {
        get => (int)Instance.Get(PropertyName.VerticesCount);
        set => Instance.Set(PropertyName.VerticesCount, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.Sizes"/>
    public double[] Sizes
    {
        get => Instance.Get(PropertyName.Sizes).AsFloat64Array();
        set => Instance.Set(PropertyName.Sizes, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.RingRatio"/>
    public float RingRatio
    {
        get => Instance.Get(PropertyName.RingRatio).AsSingle();
        set => Instance.Set(PropertyName.RingRatio, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.CornerSize"/>
    public float CornerSize
    {
        get => Instance.Get(PropertyName.CornerSize).AsSingle();
        set => Instance.Set(PropertyName.CornerSize, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.CornerDetail"/>
    public int CornerDetail
    {
        get => Instance.Get(PropertyName.CornerDetail).AsInt32();
        set => Instance.Set(PropertyName.CornerDetail, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcStart"/>
    public float ArcStart
    {
        get => Instance.Get(PropertyName.ArcStart).AsSingle();
        set => Instance.Set(PropertyName.ArcStart, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcAngle"/>
    public float ArcAngle
    {
        get => Instance.Get(PropertyName.ArcAngle).AsSingle();
        set => Instance.Set(PropertyName.ArcAngle, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcEnd"/>
    public float ArcEnd
    {
        get => Instance.Get(PropertyName.ArcEnd).AsSingle();
        set => Instance.Set(PropertyName.ArcEnd, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcStartDegrees"/>
    public float ArcStartDegrees
    {
        get => Instance.Get(PropertyName.ArcStartDegrees).AsSingle();
        set => Instance.Set(PropertyName.ArcStartDegrees, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcAngleDegrees"/>
    public float ArcAngleDegrees
    {
        get => Instance.Get(PropertyName.ArcAngleDegrees).AsSingle();
        set => Instance.Set(PropertyName.ArcAngleDegrees, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ArcEndDegrees"/>
    public float ArcEndDegrees
    {
        get => Instance.Get(PropertyName.ArcEndDegrees).AsSingle();
        set => Instance.Set(PropertyName.ArcEndDegrees, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.ClosingMethod"/>
    public ClosingMethod ClosingMethod
    {
        get => Instance.Get(PropertyName.ClosingMethod).As<ClosingMethod>();
        set => Instance.Set(PropertyName.ClosingMethod, (int)value);
    }

    /// <inheritdoc cref="BasicPolygon2D.RoundArcEnds"/>
    public bool RoundArcEnds
    {
        get => Instance.Get(PropertyName.RoundArcEnds).AsBool();
        set => Instance.Set(PropertyName.RoundArcEnds, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetPosition"/>
    public Vector2 OffsetPosition
    {
        get => Instance.Get(PropertyName.OffsetPosition).AsVector2();
        set => Instance.Set(PropertyName.OffsetPosition, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetRotationDegrees"/>
    public float OffsetRotationDegrees
    {
        get => Instance.Get(PropertyName.OffsetRotationDegrees).AsSingle();
        set => Instance.Set(PropertyName.OffsetRotationDegrees, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetRotation"/>
    public float OffsetRotation
    {
        get => Instance.Get(PropertyName.OffsetRotation).AsSingle();
        set => Instance.Set(PropertyName.OffsetRotation, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetScale"/>
    public Vector2 OffsetScale
    {
        get => Instance.Get(PropertyName.OffsetScale).AsVector2();
        set => Instance.Set(PropertyName.OffsetScale, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetSkew"/>
    public float OffsetSkew
    {
        get => Instance.Get(PropertyName.OffsetSkew).AsSingle();
        set => Instance.Set(PropertyName.OffsetSkew, value);
    }

    /// <inheritdoc cref="BasicPolygon2D.OffsetTransform"/>
    public Transform2D OffsetTransform
    {
        get => Instance.Get(PropertyName.OffsetTransform).AsTransform2D();
        set => Instance.Set(PropertyName.OffsetTransform, value);
    }

    /// <inheritdoc cref="Node2D.Position"/>
    public Vector2 Position
    {
        get => Instance.Position;
        set => Instance.Position = value;
    }
    /// <inheritdoc cref="Node2D.Rotation"/>
    public float Rotation
    {
        get => Instance.Rotation;
        set => Instance.Rotation = value;
    }
    /// <inheritdoc cref="Node2D.RotationDegrees"/>
    public float RotationDegrees
    {
        get => Instance.RotationDegrees;
        set => Instance.RotationDegrees = value;
    }
    /// <inheritdoc cref="Node2D.Scale"/>
    public Vector2 Scale
    {
        get => Instance.Scale;
        set => Instance.Scale = value;
    }

    /// <summary>
    /// Gets the underlying <see cref="BasicPolygon2D"/> wrapper around the instance that generates the
    /// shapes this <see cref="BasicCollisionPolygon2D"/> provides.
    /// </summary>
    public BasicPolygon2D BasicPolygon { get; }

    /// <inheritdoc cref="BasicPolygon2D.CreatedShape"/>
    public Vector2[] CreatedShape => Instance.Call(MethodName.GetCreatedShape).AsVector2Array();

    /// <inheritdoc cref="BasicPolygon2D.CreatedShapeDecomposed"/>
    public Godot.Collections.Array<Vector2[]> CreatedShapeDecomposed => Instance.Call(MethodName.GetCreatedShapeDecomposed).AsGodotArray<Vector2[]>();

    /// <inheritdoc cref="BasicPolygon2D.CreatedShapeType"/>
    /// <summary>Gets the type of shape created by this <see cref="BasicCollisionPolygon2D"/>.</summary>
    public ShapeType CreatedShapeType => Instance.Call(MethodName.GetCreatedShapeType).As<ShapeType>();


    /// <summary>Gets the number of <see cref="Shape2D"/>s that this <see cref="BasicCollisionPolygon2D"/> is providing.</summary>
    public int ShapeCount => Instance.Call(MethodName.ShapeCount).AsInt32();

    /// <summary>
    /// Gets the <see cref="Shape2D"/> at the given index. The number of <see cref="Shape2D"/>s is provided by <see cref="ShapeCount"/>.
    /// </summary>
    public Shape2D GetShape(int index) => Instance.Call(MethodName.GetShape, index).As<Shape2D>();

    /// <summary>Creates and wraps a <see cref="BasicCollisionPolygon2D"/> around <paramref name="instance"/>.</summary>
    /// <param name="instance">The node with the <see cref="GDScriptEquivalent"/> attached to wrap.</param>
    /// <exception cref="ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="instance"/> does not have the <see cref="GDScriptEquivalent"/> attached.</exception>
    public BasicCollisionPolygon2D(Node2D instance)
    {
        ArgumentNullException.ThrowIfNull(instance);
        if (!GDScriptEquivalent.InstanceHas(instance))
            throw new ArgumentException($"must have attached script '{GDScriptEquivalentPath}'.", nameof(instance));

        Instance = instance;
        BasicPolygon = new BasicPolygon2D(instance.Call(MethodName.GetBasicPolygon).As<Node2D>());
    }

    /// <summary>Creates an instance of <see cref="GDScriptEquivalent"/> wrapped by a new <see cref="BasicCollisionPolygon2D"/>.</summary>
    public BasicCollisionPolygon2D() : this(GDScriptEquivalent.New().As<Node2D>())
    {
    }

    public static implicit operator Node2D(BasicCollisionPolygon2D node) => node.Instance;
    public static explicit operator BasicCollisionPolygon2D(Node2D node) => new(node);

    /// <summary>Cached <see cref="StringName"/>s for the properties and fields contained in this class, for fast lookup.</summary>
    public class PropertyName : Node2D.PropertyName
    {
        public static readonly StringName Disabled = new("disabled");
        public static readonly StringName OneWayCollision = new("one_way_collision");
        public static readonly StringName OneWayCollisionMargin = new("one_way_collision_margin");
        public static readonly StringName VerticesCount = new("vertices_count");
        public static readonly StringName Sizes = new("sizes");
        public static readonly StringName OffsetRotationDegrees = new("offset_rotation_degrees");
        public static readonly StringName OffsetRotation = new("offset_rotation");
        public static readonly StringName OffsetScale = new("offset_scale");
        public static readonly StringName OffsetSkew = new("offset_skew");
        public static readonly StringName OffsetTransform = new("offset_transform");
        public static readonly StringName OffsetPosition = new("offset_position");
        public static readonly StringName RingRatio = new("ring_ratio");
        public static readonly StringName ArcStart = new("arc_start");
        public static readonly StringName ArcAngle = new("arc_angle");
        public static readonly StringName ArcEnd = new("arc_end");
        public static readonly StringName ArcStartDegrees = new("arc_start_degrees");
        public static readonly StringName ArcAngleDegrees = new("arc_angle_degrees");
        public static readonly StringName ArcEndDegrees = new("arc_end_degrees");
        public static readonly StringName CornerSize = new("corner_size");
        public static readonly StringName CornerDetail = new("corner_detail");
        public static readonly StringName ClosingMethod = new("closing_method");
        public static readonly StringName RoundArcEnds = new("round_arc_ends");
    }

    /// <summary>Cached <see cref="StringName"/>s for the methods contained in this class, for fast lookup.</summary>
    public class MethodName : Node2D.MethodName
    {
        public static readonly StringName GetCreatedShape = new("get_created_shape");
        public static readonly StringName GetCreatedShapeDecomposed = new("get_created_shape_decomposed");
        public static readonly StringName GetCreatedShapeType = new("get_created_shape_type");
        public static readonly StringName GetBasicPolygon = new("get_basic_polygon");
        public static readonly StringName GetShape = new("get_shape");
        public static readonly StringName ShapeCount = new("shape_count");
    }

    /// <summary>Cached <see cref="StringName"/>s for the signals contained in this class, for fast lookup.</summary>
    public class SignalName : Node2D.SignalName {}
}
